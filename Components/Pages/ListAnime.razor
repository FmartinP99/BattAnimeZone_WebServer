@using BattAnimeZone.Services
@using BattAnimeZone.Components.Models.Genre
@using BattAnimeZone.Components.Models.Anime
@inject NavigationManager navManager
@inject AnimeService animeService
<link rel="stylesheet" href="/ListAnime.css" />
@page "/animelist"

<SearchBar></SearchBar>

<RadzenStack class="rz-p-0 rz-p-md-12">

    <RadzenCard Style="background:transparent;">
        <RadzenPickList @bind-Source="@Source" @bind-Target="@Target" Style="height:500px; width:100%; background:transparent;" Orientation="@orientation"
                        TextProperty="@nameof(AnimeGenre.Name)" AllowFiltering="@allowFilter" Multiple="@multiple" ShowHeader="@showHeader"
                        ButtonGap="@gap" ButtonJustifyContent="@justifyContent" ButtonStyle="@style" ButtonSize="@size" ButtonShade="@shade" ButtonVariant="@variant">
            <SourceHeader>
                Genres:
            </SourceHeader>
            <TargetHeader>
                Selected Genres:
            </TargetHeader>
            <Template>
                @context.Name
            </Template>
        </RadzenPickList>
    </RadzenCard>
    <RadzenButton Click="SearchByGenres" Style="background-image: linear-gradient(to right, #5832dd,#5025ce,#5832dd,#5025ce,#5832dd);">FILTER ANIMES</RadzenButton>
</RadzenStack>

<RadzenPager Style="overflow-x: clip; max-width: 75vw;" PagingSummaryFormat="@pagingSummaryFormat" ShowPagingSummary="true" HorizontalAlign="HorizontalAlign.Left" PageNumbersCount=@pagenumcount PageSize=@pageSize Count="count" PageChanged="@PageChanged" />

@if (searched_animes.Count > 0){



    @foreach (Anime anime in animes_per_page)
    {
        <RadzenRow @onclick=@(() => NavigateTo(anime.Mal_id)) Style="height:100px; margin-bottom: 30px;">
            <RadzenColumn Style="max-width:100px; ">
                <RadzenImage Style="max-width:100px; max-height:100px;" Path="@anime.Image_large_webp_url"></RadzenImage>
            </RadzenColumn>
            <RadzenColumn Style="max-width:200px;">
                English Name: <br> @anime.Title_english
            </RadzenColumn>
            <RadzenColumn Style="max-width:200px;">
                Japanese name: <br> @anime.Title_japanese
            </RadzenColumn>
            <RadzenColumn Style="max-width:100px;">
                Type: <br> @anime.Media_type
            </RadzenColumn>
            <RadzenColumn Style="max-width:100px;">
                Episodes: <br> @anime.Episodes
            </RadzenColumn>
            <RadzenColumn Style="max-width:100px;">
                Score: <br> @anime.Score
            </RadzenColumn>
            <RadzenColumn Style="max-width:100px;">
                Year: <br> @anime.Year
            </RadzenColumn>
            <RadzenColumn Style="max-width:100px;">
                Status: <br> @anime.Status
            </RadzenColumn>
        </RadzenRow>
    }
}


@code {
    Dictionary<int, int> animeCountPerGenre = new Dictionary<int, int>();

    JustifyContent justifyContent = JustifyContent.Center;
    Variant variant = Variant.Outlined;
    ButtonStyle style = ButtonStyle.Secondary;
    Shade shade = Shade.Default;
    ButtonSize size = ButtonSize.Medium;
    Orientation orientation = Orientation.Horizontal;

    string gap = "12px";
    bool allowFilter = true;
    bool multiple = true;
    bool showHeader = true;

    IEnumerable<AnimeGenre> _source = new List<AnimeGenre>();
    IEnumerable<AnimeGenre> Source
    {
        get
        {
            return _source;
        }
        set
        {
            if (value != null)
            {
                _source = value;
            }
        }
    }

    IEnumerable<AnimeGenre> _target = new List<AnimeGenre>();
    IEnumerable<AnimeGenre> Target
    {
        get
        {
            return _target;
        }
        set
        {
            if (value != null)
            {
                _target = value;
                foreach(var tar in value)
                {
                    Console.WriteLine(tar.Name);
                }
            }
        }
    }





    Dictionary<int, HashSet<int>> animesPerGenreIDs;
    List<Anime> searched_animes = new List<Anime>();


    IEnumerable<Anime> animes_per_page = new List<Anime>();
    string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";
    int pageSize = 20;
    int count;
    int pageNumber;
    int pagenumcount = 15;



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Dictionary<int, AnimeGenre> ang = await animeService.GetGenres();
        Source = ang.Values.ToList();

        animesPerGenreIDs = await animeService.GetAnimesPerGenreIds();

        animeCountPerGenre = animesPerGenreIDs.ToDictionary(
            kvp => kvp.Key,
            kvp => kvp.Value.Count
        );

        Source = Source
            .OrderByDescending(genre => animeCountPerGenre.ContainsKey(genre.Mal_id) ? animeCountPerGenre[genre.Mal_id] : 0)
            .Where(genre => animeCountPerGenre.ContainsKey(genre.Mal_id) && animeCountPerGenre[genre.Mal_id] != 0)
            .ToList();

    }

    protected async Task SearchByGenres()
    {

        if (Target == null) return;
        if (!Target.Any()) return;
        HashSet<int> found_animes = new HashSet<int>();
        List<AnimeGenre> targetList = Target.ToList();
        int first_index = targetList[0].Mal_id;
        found_animes = new HashSet<int>(animesPerGenreIDs[first_index]);
        for(int i=1; i<targetList.Count; i++)
        {
            HashSet<int> curr_animes = animesPerGenreIDs[targetList[i].Mal_id];
            found_animes.IntersectWith(curr_animes);
        }

        searched_animes = await animeService.GetMultipleAnimes(found_animes);
        searched_animes = searched_animes.OrderByDescending(anim => anim.Score).ToList();
        animes_per_page = searched_animes.Take(pageSize);
        count = searched_animes.Count;

    }

    void PageChanged(PagerEventArgs args)
    {
        animes_per_page = searched_animes.Skip(args.Skip).Take(args.Top);
    }

    protected async void NavigateTo(int mal_id)
    {
        navManager.NavigateTo($"/anime/{mal_id}");
    }

}
