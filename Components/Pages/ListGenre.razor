@using BattAnimeZone.Services
@using BattAnimeZone.Components.Models.Genre
@inject NavigationManager navManager
@inject AnimeService animeService
<link rel="stylesheet" href="/ListGenre.css" />
@page "/genrelist"


@for (int rowindex = 0; rowindex < (int)Math.Ceiling((double)animeGenres.Count / 4); rowindex++)
{
    //must copy the variable due to how c# lambda functions work -> has access to a variable and not to the value of the variable.
    var localRow = rowindex;
    int item_index = localRow * 4;
    <RadzenRow class="genreListRow">
        @for (int colindex = 0; colindex < 4; colindex++)
        {
                var localCol = colindex;
            @if (item_index + localCol < animeGenres.Count)
            {
            
                <RadzenColumn class="genreListColumn" @onclick="() => NavigateTo(animeGenres[item_index + localCol].Mal_id)">
                    <div>
                    <p class="centered-text">@animeGenres[item_index + localCol].Name  </p>
                    
                    <p Style="font-size:25px;" class="centered-text">( @animeCountPerGenre[animeGenres[item_index + localCol].Mal_id] )
                    </p>
                    </div>
                </RadzenColumn>
              
            }
        }
       
    </RadzenRow>
}

@code {
    List<AnimeGenre> animeGenres;
    Dictionary<int, int> animeCountPerGenre = new Dictionary<int, int>();

    protected override async Task OnInitializedAsync()
    {
        Dictionary<int, AnimeGenre> ang = await animeService.GetGenres();
        animeGenres = ang.Values.ToList();

        var temnpAnimesPerGenreIDs = await animeService.GetAnimesPerGenreIds();

        animeCountPerGenre = temnpAnimesPerGenreIDs.ToDictionary(
            kvp => kvp.Key,
            kvp => kvp.Value.Count
        );

        animeGenres = animeGenres
            .OrderByDescending(genre => animeCountPerGenre.ContainsKey(genre.Mal_id) ? animeCountPerGenre[genre.Mal_id] : 0)
            .Where(genre => animeCountPerGenre.ContainsKey(genre.Mal_id) && animeCountPerGenre[genre.Mal_id] != 0)
            .ToList();


        base.OnInitialized();
    }

    protected async void NavigateTo(int genreid)
    {

        navManager.NavigateTo($"/genrelist/{genreid}");
    }


}
