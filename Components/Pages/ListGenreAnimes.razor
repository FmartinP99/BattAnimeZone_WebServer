@using BattAnimeZone.Services
@using BattAnimeZone.Components.Models.Genre
@using BattAnimeZone.Components.Models.Anime
@inject AnimeService animeService
@inject NavigationManager navManager
<link rel="stylesheet" href="/ListGenreAnimes.css" />
@page "/genrelist/{genreid:int}"


<SearchBar></SearchBar>

@if (found)
{
    <RadzenRow Style="width:100%; display:flex;">
        <RadzenColumn Style="min-width:62%;">
            <RadzenPager Style="overflow-x: clip; "  PagingSummaryFormat="@pagingSummaryFormat" ShowPagingSummary="true" HorizontalAlign="HorizontalAlign.Left" PageNumbersCount=5 PageSize=@pageSize Count="count" PageChanged="@PageChanged" />
        </RadzenColumn>
        <RadzenColumn>
            <RadzenLabel Text="Order by:" Component="DropDownTextValueProperties" Style="margin-right: 8px; vertical-align: middle;" />
            <RadzenDropDown Change="onChanged" class="rzdropdown" @bind-Value=@filter_str Data=@filter_bys  Style="width: 100%; max-width: 400px;" Name="DropDownTextValueProperties" />
        </RadzenColumn>
</RadzenRow>

    <RadzenDataList WrapItems="true" AllowPaging="false" Data="@animes_per_page" TItem="Anime">
        <Template Context="anime">
            <RadzenCard class="lga-card" @onclick="@(() => NavigateTo(anime.Mal_id))">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                    <RadzenImage Path="@anime.Image_large_webp_url" Style="width: 100px; height: 100px; border-radius: 15%" AlternateText="no image" />
                    <RadzenStack Gap="0" Style="width:70%">
                        <RadzenText TextStyle="TextStyle.Overline" Style="color:White" class=" rz-display-flex rz-mt-2 rz-my-0">English Name</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Style="color:White"><b>@(anime.Title_english)</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" Style="color:White" class="rz-display-flex rz-mt-4 rz-mb-0">Japanese Name</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Style="color:White"><b>@(anime.Title_japanese)</b></RadzenText>
                    </RadzenStack>
                    <RadzenStack Gap="0">
                        <RadzenText TextStyle="TextStyle.Overline" Style="color:White" class=" rz-display-flex rz-mt-2 rz-my-0">Score</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Style="color:White"><b>@(anime.Score)</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" Style="color:White" class="rz-display-flex rz-mt-4 rz-mb-0">Popularity</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Style="color:White"><b>@(anime.Popularity)</b></RadzenText>
                    </RadzenStack>

                    <RadzenStack Gap="0">
                        <RadzenText TextStyle="TextStyle.Overline" Style="color:White" class=" rz-display-flex rz-mt-2 rz-my-0">Type</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Style="color:White"><b>@(anime.Media_type)</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" Style="color:White" class="rz-display-flex rz-mt-4 rz-mb-0">Year</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Style="color:White"><b>@(anime.Year)</b></RadzenText>
                    </RadzenStack>
                </RadzenStack>
                <hr style="border: none; background-color: rgba(0,0,0,.2); height: 1px; margin: 1rem 0;" />
                <RadzenRow>
                    <RadzenColumn Size="8" Class="rz-text-truncate">
                        <b>Episodes: @(anime.Episodes)</b>

                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
        </Template>
    </RadzenDataList>
}
else
{
    NavigateToIndex();
}

@code {
    bool found = true;
    [Parameter]
    public int genreid { get; set; }
    List<Anime> animes = new List<Anime>();
    IEnumerable<Anime> animes_per_page = new List<Anime>();
    string filter_str = "Score Descending";
    string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} records)";
    int pageSize = 9;
    int count;
    int last_skip = 0;
    IEnumerable<string> filter_bys = new List<string>() {"Alphabetical ENG", "Alphabetical Descending ENG",  "Alphabetical JP", "Alphabetical Descending JP",
    "Year", "Year Descending",
    "Score", "Score Descending", "Popularity", "Popularity Descending", "Type", "Type Descending" };

    protected override async Task OnInitializedAsync()
    {

        animes = await animeService.GetAnimesPerGenre(genreid);
        if (animes[0].Mal_id != -1)
        {
            found = true;
            count = animes.Count;
            animes_per_page = animes.Take(pageSize);

        }
        else
        {
            found = false;
            return;
        }


        base.OnInitialized();
    }

    void PageChanged(PagerEventArgs args)
    {
        animes_per_page = animes.Skip(args.Skip).Take(args.Top);
        last_skip = args.Skip;
    }

    protected void onChanged()
    {
        Console.WriteLine(filter_str);
        switch (filter_str)
        {
            case "Alphabetical ENG":
                animes = animes.OrderBy(anime => string.IsNullOrEmpty(anime.Title_english)).ThenBy(anime => anime.Title_english).ToList();
                break;
            case "Alphabetical Descending ENG":
                animes = animes.OrderBy(anime => string.IsNullOrEmpty(anime.Title_english)).ThenByDescending(anime => anime.Title_english).ToList();
                break;
            case "Alphabetical JP":
                animes = animes.OrderBy(anime => string.IsNullOrEmpty(anime.Title_japanese)).ThenBy(anime => anime.Title_japanese).ToList();
                break;
            case "Alphabetical Descending JP":
                animes = animes.OrderBy(anime => string.IsNullOrEmpty(anime.Title_japanese)).ThenByDescending(anime => anime.Title_japanese).ToList();
                break;
            case "Year":
                animes = animes.OrderBy(anime => anime.Year == 0.0).ThenBy(anime => anime.Year).ToList();
                break;
            case "Year Descending":
                animes = animes.OrderBy(anime => anime.Year == 0.0).ThenByDescending(anime => anime.Year).ToList();
                break;
            case "Score":
                animes = animes.OrderBy(anime => anime.Score == 0.0).ThenBy(anime => anime.Score).ToList();
                break;
            case "Score Descending":
                animes = animes.OrderBy(anime => anime.Score == 0.0).ThenByDescending(anime => anime.Score).ToList();
                break;
            case "Popularity":
                animes = animes.OrderBy(anime => anime.Popularity == 0.0).ThenBy(anime => anime.Popularity).ToList();
                break;
            case "Popularity Descending":
                animes = animes.OrderBy(anime => anime.Popularity == 0.0).ThenByDescending(anime => anime.Popularity).ToList();
                break;
            case "Type":
                animes = animes.OrderBy(anime => string.IsNullOrEmpty(anime.Media_type)).ThenBy(anime => anime.Media_type).ToList();
                break;
            case "Type Descending":
                animes = animes.OrderBy(anime => string.IsNullOrEmpty(anime.Media_type)).ThenByDescending(anime => anime.Media_type).ToList();
                break;
            default:
                break;
        }
        animes_per_page = animes.Skip(last_skip).Take(pageSize);
    }


    protected async void NavigateTo(int mal_id)
    {

        navManager.NavigateTo($"/anime/{mal_id}");
    }

     protected void NavigateToIndex()
    {
        navManager.NavigateTo("./");
    }
}
